class CuteVM{constructor(e){this.stack=[],this.funcPtr={},this.reg={EAX:0,EBX:0,ECX:0,EDX:0,ESP:0,EBP:0,EIP:0},this.code=e.split("\n");for(let t in e){let s=this.code[t];null!=s&&""!=s&&(s.includes(";")&&(s=s.slice(0,e.lastIndexOf(";"))),":"==s[s.length-1]&&(this.funcPtr[s.slice(0,s.length-1)]=parseInt(t)))}null!=this.funcPtr.main&&(this.reg.EIP=this.funcPtr.main+1)}Next(){let e=this.code[this.reg.EIP];if(null==e)return void this.reg.EIP++;e.includes(";")&&(e=e.slice(0,e.lastIndexOf(";")));let t=this.Parse(e);null!=t&&0!=e.length&&":"!=e[e.length-1]?(this[t.name]&&(t.args.length>0?this[t.name](...t.args):this[t.name]()),this.reg.EIP++):this.reg.EIP++}Parse(e){if(e.length>0&&":"!=e[e.length-1]){let t={name:"",args:[]};if(e.includes(" ")){e=e.trim(),t.name=e.split(" ")[0].toUpperCase();let s=e.slice(e.indexOf(" ")+1).split(",");for(let e in s){let r=s[e].trim();if(null!=this.reg[r.toUpperCase()])t.args.push({reg:r.toUpperCase(),type:0});else if("["==r[0]&&"]"==r[r.length-1]){let e=r.slice(1,r.length-1);t.args.push({reg:e.slice(0,4).toUpperCase(),Offset:parseInt(e.slice(3)),type:1})}else t.args.push({content:r,type:2})}}else e=e.trim(),t.name=e.split(" ")[0].toUpperCase();return t}}getLength(e){return{BYTE:1,WORD:2,DWORD:4,QWORD:8}[e.toUpperCase()]||0}MOV(e,t){let s;switch(t.type){case 0:s=this.reg[t.reg];break;case 1:s=this.stack[t.reg+t.Offset];break;case 2:s=parseFloat(t.content)}switch(e.type){case 0:this.reg[e.reg]=s;break;case 1:this.stack[e.reg+e.Offset]=s;break;case 2:return void this.error(6)}}ADD(e,t){let s;switch(t.type){case 0:s=parseFloat(this.reg[t.reg]);break;case 1:s=parseFloat(this.stack[t.reg+t.Offset]);break;case 2:s=parseFloat(t.content)}switch(e.type){case 0:this.reg[e.reg]+=s;break;case 1:this.stack[e.reg+e.Offset]+=s;break;case 2:return void this.error(6)}}SUB(e,t){let s;switch(t.type){case 0:s=parseFloat(this.reg[t.reg]);break;case 1:s=parseFloat(this.stack[t.reg+t.Offset]);break;case 2:s=parseFloat(t.content)}switch(e.type){case 0:this.reg[e.reg]-=s;break;case 1:this.stack[e.reg+e.Offset]-=s;break;case 2:return void this.error(6)}}PUSH(e){let t;switch(e.type){case 0:t=parseFloat(this.reg[e.reg]);break;case 1:t=parseFloat(this.stack[e.reg+e.Offset]);break;case 2:t=parseFloat(e.content)}this.reg.ESP--,-this.reg.ESP>this.stack.length?this.stack.push(t):this.stack[-this.reg.ESP-1]=t}POP(e){let t=this.stack[-this.reg.ESP-1];switch(this.reg.ESP++,e.type){case 0:this.reg[e.reg]=t;break;case 1:this.stack[e.reg+e.Offset]=t;break;case 2:return void this.error(6)}}CALL(e){switch(e.type){case 0:this.error(6),returnd;case 1:return void this.error(6);case 2:if(null==this.funcPtr[e.content])return void this.error(5);this.PUSH({reg:"EIP",type:0}),this.reg.EIP=this.funcPtr[e.content]}}RET(){let e=this.stack[-this.reg.ESP-1];this.reg.EIP=e}error(e){console.error(["","","","","","","Invaild Opcode"][e])}}